{"version":3,"sources":["Components/inputHeader.js","Components/todoItem.js","Components/todoList.js","Components/filters.js","Components/footer.js","App.js","index.js"],"names":["Form","state","note","handlerNoteChange","event","_this","setState","target","value","handlerFormSubmit","preventDefault","addTodo","props","this","react_default","a","createElement","onSubmit","className","placeholder","onChange","React","Component","TodoItem","_ref","item","handleRemove","handleCheck","completed","type","id","checked","htmlFor","onClick","defaultProps","TodoList","list","map","i","todoItem","key","Filters","filters","clearCompleted","filteredList","activeFilter","style","display","filter","length","Object","values","cursor","href","task","Footer","Components_filters","all","active","App","prevState","concat","toConsumableArray","Date","taskId","handlerFilterTasks","_this$state","todo","checkedAll","objectSpread2","_this2","_this$state2","inputHeader","every","todoList","footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4f4c2291.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends React.Component {\n  state = {\n    note: '',\n  };\n\n  handlerNoteChange = (event) => {\n    this.setState({ note: event.target.value });\n  };\n\n  handlerFormSubmit = (event) => {\n    event.preventDefault();\n    const { addTodo } = this.props;\n    const { note } = this.state;\n\n    if (!note) {\n      return;\n    }\n\n    addTodo(note);\n\n    this.setState(() => (\n      {\n        note: '',\n      }));\n  };\n\n  render() {\n    const { note } = this.state;\n\n    return (\n\n      <form onSubmit={this.handlerFormSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handlerNoteChange}\n          value={note}\n        />\n      </form>\n\n    );\n  }\n}\n\nForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ item, handleRemove, handleCheck }) => (\n\n  <li\n    className={!item.completed\n      ? ''\n      : 'completed'}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={item.id}\n        checked={item.completed}\n        onChange={() => {\n          handleCheck(item.id);\n        }}\n      />\n      <label\n        htmlFor=\"todo-1\"\n      >\n        {item.note}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => {\n          handleRemove(item.id);\n        }}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  item: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.bool,\n  ])),\n  handleRemove: PropTypes.func.isRequired,\n  handleCheck: PropTypes.func.isRequired,\n};\n\nTodoItem.defaultProps = {\n  item: '',\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './todoItem';\n\nconst TodoList = ({ list, handleRemove, handleCheck }) => (\n  <ul\n    className=\"todo-list\"\n  >\n    {list.map((item, i) => (\n      <TodoItem\n        key={item.id}\n        list={list}\n        item={item}\n        i={i}\n        handleRemove={handleRemove}\n        handleCheck={handleCheck}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n  handleRemove: PropTypes.func.isRequired,\n  handleCheck: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  list: [],\n};\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filters\n  = ({ filters, list, clearCompleted, filteredList, activeFilter }) => (\n\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        items left&nbsp;\n        {list.filter(item => item.completed === false).length}\n      </span>\n\n      <ul className=\"filters\">\n        {Object.values(filters).map(item => (\n          <li key={item}>\n            <a\n              style={{ cursor: 'hand' }}\n              href=\"/#\"\n              className={activeFilter === item\n                ? 'selected'\n                : ''}\n              onClick={() => filteredList(item)}\n            >\n              {item}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n        style={list.filter(task => task.completed).length > 0\n          ? { display: 'block' }\n          : { display: 'none' }}\n      >\n          Clear completed\n      </button>\n    </footer>\n  );\n\nFilters.propTypes = {\n  filters: PropTypes.objectOf(PropTypes.string),\n  list: PropTypes.arrayOf(PropTypes.object),\n  clearCompleted: PropTypes.func.isRequired,\n  filteredList: PropTypes.func.isRequired,\n  activeFilter: PropTypes.arrayOf(PropTypes.string),\n\n};\n\nFilters.defaultProps = {\n  filters: [],\n  list: [],\n  activeFilter: [],\n};\n\nexport default Filters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Filters from './filters';\n\nconst Footer = ({ filters, list, clearCompleted, filteredList }) => (\n  <Filters\n    filters={filters}\n    list={list}\n    clearCompleted={clearCompleted}\n    filteredList={filteredList}\n  />\n);\n\nFooter.propTypes = {\n  filters: PropTypes.objectOf(PropTypes.string),\n  list: PropTypes.arrayOf(PropTypes.object),\n  clearCompleted: PropTypes.func.isRequired,\n  filteredList: PropTypes.func.isRequired,\n};\n\nFooter.defaultProps = {\n  filters: [],\n  list: [],\n};\n\nexport default Footer;\n","import React from 'react';\nimport Form from './Components/inputHeader';\nimport TodoList from './Components/todoList';\nimport Footer from './Components/footer';\n\nconst filters = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nclass App extends React.Component {\n  state = {\n    list: [],\n    activeFilter: '',\n  };\n\n addTodo = (note) => {\n   this.setState(prevState => ({\n     list: [...prevState.list,\n       {\n         id: +new Date(),\n         note,\n         completed: false,\n       },\n     ],\n   }));\n };\n\n  handleRemove = (taskId) => {\n    this.setState(prevState => ({\n      list: prevState.list.filter(task => task.id !== taskId),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      list: prevState.list.filter(task => task.completed === false),\n    }));\n  };\n\n  filteredList = (filter) => {\n    this.setState({\n      activeFilter: filter,\n    });\n  };\n\n  handlerFilterTasks = () => {\n    const { list, activeFilter } = this.state;\n    const { completed, active } = filters;\n\n    if (activeFilter === completed) {\n      return list.filter(todo => todo.completed);\n    }\n\n    if (activeFilter === active) {\n      return list.filter(todo => !todo.completed);\n    }\n\n    return list;\n  };\n\n  checkedAll = (checked) => {\n    this.setState(prevState => ({\n      list: prevState.list.map(item => ({\n        ...item,\n        completed: checked,\n      })),\n\n    }));\n  };\n\n  handleCheck = (id) => {\n    this.setState(state => ({\n      list: state.list.map(task => (task.id === id\n        ? {\n          ...task,\n          completed: !task.completed,\n        }\n        : task\n      )),\n    }));\n  };\n\n  render() {\n    const { list, activeFilter } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>Tasks</h1>\n\n        </header>\n\n        <Form addTodo={this.addTodo} />\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={list.every(i => i.completed) && list.length !== 0}\n            onChange={(event) => {\n              this.checkedAll(event.target.checked);\n            }}\n          />\n\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            list={this.handlerFilterTasks()}\n            handleRemove={this.handleRemove}\n            handleCheck={this.handleCheck}\n          />\n\n        </section>\n\n        <Footer\n          filters={filters}\n          list={list}\n          activeFilter={activeFilter}\n          clearCompleted={this.clearCompleted}\n          filteredList={this.filteredList}\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}